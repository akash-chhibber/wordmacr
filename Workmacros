Sub resizepics()
Dim insertedPicture As InlineShape
Dim insertedShape As Shape
Dim imgMult As Single
imgMult = 6.7

For Each insertedPicture In ActiveDocument.InlineShapes
insertedPicture.Select
'insertedPictureHeight = insertedPictureHeight * imgMult / insertedPicture.Width
insertedPicture.Width = InchesToPoints(6.7)
Next
'For Each insertedShape In ActiveDocument.Shapes
'insertedShape.Select
'insertedShape.Height = insertedShape.Height * imgMult / insertedShape.Width
'insertedShape.Width = imgMult
'Next
End Sub
Public Sub ExtractCommentsToNewDoc()
 
   Dim oDoc As Document
   Dim oNewDoc As Document
   Dim oTable As Table
   Dim nCount As Long
   Dim n As Long
   Dim Title As String
  Dim s As String
  Dim r As Range, c As Range
  Dim re As Object, mc As Object, m As Object
  Dim i As Long
 
 
'Setup intital values
Title = "Extract All Comments to New Document"
   Set oDoc = ActiveDocument
nCount = ActiveDocument.Comments.Count
 
'Check if document has any comments in it and if it does, then check this is what the user wants to do
   If nCount = 0 Then
       MsgBox "The active document contains no comments.", vbOKOnly, Title
       GoTo ExitHere
   Else
'Stop if user does not click Yes
       If MsgBox("Do  you want to extract all comments to a new document?", _
               vbYesNo + vbQuestion, Title) <> vbYes Then
           GoTo ExitHere
       End If
   End If
 
'Turned on as recommendation from MSDN Technet article
Application.ScreenUpdating = False
'Create a new document for the comments, based on Normal.dot
   Set oNewDoc = Documents.Add
'Set to landscape
oNewDoc.PageSetup.Orientation = wdOrientLandscape
'Insert a 10-column table for the comments
   With oNewDoc
.Content = ""
       Set oTable = .Tables.Add _
           (Range:=Selection.Range, _
           NumRows:=nCount + 1, _
           NumColumns:=12)
   End With
'Insert info in header - change date format as you wish
'   oNewDoc.Sections(1).Headers(wdHeaderFooterPrimary).Range.Text = _
'       "Document Review Record - " & "Comments extracted from: " & oDoc.Name & vbCr & _
'       "Created by: " & Application.UserName & _
'       " Creation date: " & Format(Date, "MMMM d, yyyy") & _
'       "  - All page and line numbers are with Final: Show Markup turned on"
'insert page number into footer
   oNewDoc.Sections(1).Footers(wdHeaderFooterPrimary).PageNumbers.Add PageNumberAlignment:=wdAlignPageNumberRight
 
 
'Adjust the Normal style and Header style
   With oNewDoc.Styles(wdStyleNormal)
.Font.Name = "Arial"
.Font.Size = 8
.ParagraphFormat.LeftIndent = 0
.ParagraphFormat.SpaceAfter = 6
   End With
 
   With oNewDoc.Styles(wdStyleHeader)
.Font.Size = 8
.ParagraphFormat.SpaceAfter = 0
   End With
 
'Format the table appropriately
   With oTable
.AllowAutoFit = False
.Style = "Table Grid"
.PreferredWidthType = wdPreferredWidthPercent
.PreferredWidth = 100
.Columns(1).PreferredWidth = 2
.Columns(2).PreferredWidth = 2
.Columns(3).PreferredWidth = 2
.Columns(4).PreferredWidth = 2
.Columns(5).PreferredWidth = 2
.Columns(6).PreferredWidth = 78
.Columns(7).PreferredWidth = 2
.Columns(8).PreferredWidth = 2
.Columns(9).PreferredWidth = 2
.Columns(10).PreferredWidth = 2
.Columns(11).PreferredWidth = 2
.Columns(12).PreferredWidth = 2
'.Columns(1).Shading.BackgroundPatternColor = -570359809
.Rows(1).HeadingFormat = True
   End With
 
'Insert table headings
   With oTable.Rows(1)
.Range.Font.Bold = True
.Shading.BackgroundPatternColor = 5296274
.Cells(1).Range.Text = "Sr No"
.Cells(2).Range.Text = "FSD"
.Cells(3).Range.Text = "Version No."
.Cells(5).Range.Text = "Section Heading"
.Cells(4).Range.Text = "Page"
.Cells(6).Range.Text = "Feedback/Comments/Amendments"
.Cells(7).Range.Text = "Logged By"
.Cells(8).Range.Text = "Vendor 's Comment"
.Cells(9).Range.Text = "Category (New, Duplicate, Update, Removed, Clarification, No Change)"
.Cells(10).Range.Text = "Action (Closed, Pending, Reopen)"
.Cells(11).Range.Text = "Action Party(Bank, Vendor)"
.Cells(12).Range.Text = "Effort Impact(FS, Development, Testing, All, None)"
   End With
 
ActiveDocument.Repaginate
 
'Toggle nonprinting characters twice
   ActiveWindow.ActivePane.View.ShowAll = Not _
    ActiveWindow.ActivePane.View.ShowAll
 
   ActiveWindow.ActivePane.View.ShowAll = Not _
     ActiveWindow.ActivePane.View.ShowAll
'Get info from each comment from oDoc and insert in table, no way to currently insert Criticality of comment.
'Suggest either done afterwards or simply include C,S,M in the start of each comment and remove Col 8
   For n = 1 To nCount
       With oTable.Rows(n + 1)
.Cells(1).Range.Text = n
'call function to get section heading
.Cells(5).Range.Text = fGetNearestParaTextStyledIn(oDoc.Comments(n).Scope)
'Page number
.Cells(4).Range.Text = oDoc.Comments(n).Scope.Information(wdActiveEndPageNumber)
' The line number
'.Cells(4).Range.Text = oDoc.Comments(n).Scope.Information(wdFirstCharacterLineNumber)
'The text marked by the comment
.Cells(6).Range.Text = oDoc.Comments(n).Range.Text & "!<B>Original Text:!</B>" & oDoc.Comments(n).Scope
'The comment itself
'.Cells(5).Range.Text = oDoc.Comments(n).Range.Text
'The comment author
.Cells(7).Range.Text = oDoc.Comments(n).Author

       End With
   Next n
 
Application.ScreenUpdating = True
Application.ScreenRefresh
 
'Tell them its finished
oNewDoc.Activate
   MsgBox nCount & " comments found. Finished creating comments document.", vbOKOnly, Title
BWordSqueezeParagraphMarks
ExitHere:
   Set oDoc = Nothing
   Set oNewDoc = Nothing
   Set oTable = Nothing
 
End Sub
 
 
'----------------------------------------------------------------------------------------------------------
' COMPLEX SEARCH METHOD:
' Uses the Find object (which is always faster) to search an array of style names
' and return the text of the paragraph nearest to the original range
'----------------------------------------------------------------------------------------------------------
Public Function fGetNearestParaTextStyledIn(Optional rngOriginal As Range, _
   Optional sStyleNames As String = "Heading 1|Heading 2|Heading 3|Heading 4|Heading 5", _
   Optional bLookDown As Boolean = False, _
   Optional bIncludeParagraphMark As Boolean = False) As String
 
   Dim oDoc As Document
   Dim aryStyleNames() As String
   Dim colFoundRanges As Collection
   Dim rngReturn As Range
   Dim i As Integer
   Dim sReturnText As String
   Dim s1ReturnText As String
   Dim s2ReturnText As String
   Dim lDistance As Long
 
   On Error GoTo l_err
'set a default if we didn't pass it
   If rngOriginal Is Nothing Then
       Set rngOriginal = Selection.Range.Duplicate
   End If
 
'create a new instance of a collection
   Set colFoundRanges = New Collection
 
'get our array of style names to look for
aryStyleNames = Split(sStyleNames, "|")
 
'loop through the array
   For i = 0 To UBound(aryStyleNames)
'if you wanted to add additional styles, you could change the optional parameter, or
'pass in different values
       Set rngReturn = fGetNearestParaRange(rngOriginal.Duplicate, aryStyleNames(i), bLookDown)
'if we found it in the search direction
       If Not rngReturn Is Nothing Then
'then add it to the collection
           colFoundRanges.Add rngReturn
       End If
   Next
 
'if we found anything in our collection, then we can go through it,
'and see which range is closest to our original range, depending on our search direction
   If colFoundRanges.Count > 0 Then
'start with an initial return
       Set rngReturn = colFoundRanges(1)
'and an initial distance value as an absolute number
lDistance = Abs(rngOriginal.Start - rngReturn.Start)
'then go through the rest of them, and return the one with the lowest distance between
       For i = 2 To colFoundRanges.Count
           If lDistance > Abs(rngOriginal.Start - colFoundRanges(i).Start) Then
'set a new range
               Set rngReturn = colFoundRanges(i)
'and a new distance test
lDistance = Abs(rngOriginal.Start - rngReturn.Start)
           End If
       Next
 
'now get the text we're going to return
s1ReturnText = rngReturn.ListFormat.ListString
s2ReturnText = rngReturn.Text
sReturnText = s1ReturnText ' & " - " & s2ReturnText
's1ReturnText = Replace(s1ReturnText, vbCr, "1")
 
'sReturnText = s1ReturnText
'and whether to include the paragraph mark
'      If bIncludeParagraphMark = False Then
'sReturnText = Replace(sReturnText, vbCr, "")
       End If
   
 
 
l_exit:
fGetNearestParaTextStyledIn = sReturnText
   Exit Function
l_err:
'black box, so that any errors return an empty string
sReturnText = ""
   Resume l_exit
   
 
  
End Function
'----------------------------------------------------------------------------------------------------------
'return the nearest paragraph range styled
'defaults to Heading 1
'NOTE: if searching forward, starts searching from the *beginning* of the passed range
'      if searching backward, starts searching from the *end* of the passed range
'----------------------------------------------------------------------------------------------------------
Public Function fGetNearestParaRange(rngWhere As Range, _
   Optional sStyleName As String = "Heading 1", _
   Optional bSearchForward As Boolean = False) As Range
   Dim rngSearch As Range
 
   On Error GoTo l_err
   Set rngSearch = rngWhere.Duplicate
'if searching down, then start at the beginning of our search range
   If bSearchForward Then
       rngSearch.Collapse wdCollapseStart
'otherwise, search from the end
   Else
       rngSearch.Collapse wdCollapseEnd
   End If
 
'find the range
   With rngSearch.Find
.Wrap = wdFindStop
.Forward = bSearchForward
.Style = sStyleName
'if we found it, return it
       If .Execute Then
           Set fGetNearestParaRange = rngSearch
       Else
           Set fGetNearestParaRange = Nothing
       End If
   End With
 
l_exit:
   Exit Function
l_err:
'black box- any errors, return nothing
   Set rngSearch = Nothing
   Resume l_exit
End Function
 
Function BWordSqueezeParagraphMarks()
Dim xDoc As Document
Set xDoc = ActiveDocument
xDoc.Content.Select
 
With xDoc
  With .Content.Find
    .Text = "[^13]{1,}"
    .Replacement.Text = "!"
    .MatchWildcards = True
    .Execute Replace:=wdReplaceAll
   End With
   .Characters.Last.Delete
End With
End Function




Sub Autofit()
'this will autofit all tables and optionally also apply selected style
Application.ScreenUpdating = False
Dim Tbl As Table
Dim mycolor As WdColor

mycolor = wdColorBlack

For a = 1 To ActiveDocument.Tables.Count
   ActiveDocument.Tables(a).Select
  
 '  MsgBox a
   
     ActiveDocument.Tables(a).AutoFitBehavior (wdAutoFitWindow)
 
     ActiveDocument.Tables(a).Rows.HeightRule = wdRowHeightAuto
  
     ActiveDocument.Tables(a).TopPadding = 1
     ActiveDocument.Tables(a).BottomPadding = 1
     ActiveDocument.Tables(a).LeftPadding = 5
     ActiveDocument.Tables(a).RightPadding = 3
  '   ActiveDocument.Tables(a).RightPadding = InchesToPoints(0)
      ActiveDocument.Tables(a).AllowAutoFit = True
      
    '  ActiveDocument.Tables(a).Style = "Table Grid1"
    With ActiveDocument.Tables(a)
    .Borders.InsideLineStyle = wdLineStyleSingle
    .Borders.OutsideLineStyle = wdLineStyleSingle
'    .Borders(wdBorderTop).Color = mycolor
'    .Borders(wdBorderBottom).Color = mycolor
'    .Borders(wdBorderHorizontal).Color = mycolor
'    .Borders(wdBorderVertical).Color = mycolor
'    .Borders(wdBorderLeft).Color = mycolor
'    .Borders(wdBorderRight).Color = mycolor
    End With
 For Each aBorder In ActiveDocument.Tables(a).Borders
    aBorder.Color = wdColorIndigo
    Next
Next
Application.ScreenUpdating = True
Application.ScreenRefresh
MsgBox "Done", vbOKOnly
End Sub




